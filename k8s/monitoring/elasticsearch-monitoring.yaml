# Elasticsearch Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  labels:
    app: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        env:
        - name: discovery.type
          value: single-node
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
        - name: xpack.security.enabled
          value: "false"
        - name: cluster.name
          value: "ecommerce-logs"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /usr/share/elasticsearch/data
        readinessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: elasticsearch-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  labels:
    app: elasticsearch
spec:
  type: ClusterIP
  ports:
  - port: 9200
    targetPort: 9200
    name: http
  - port: 9300
    targetPort: 9300
    name: transport
  selector:
    app: elasticsearch

---
# Kibana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  labels:
    app: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:7.17.0
        ports:
        - containerPort: 5601
          name: http
        env:
        - name: ELASTICSEARCH_HOSTS
          value: "http://elasticsearch.monitoring.svc.cluster.local:9200"
        - name: SERVER_NAME
          value: "kibana"
        - name: SERVER_HOST
          value: "0.0.0.0"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /api/status
            port: 5601
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/status
            port: 5601
          initialDelaySeconds: 60
          periodSeconds: 30
      initContainers:
      - name: wait-for-elasticsearch
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z elasticsearch.monitoring.svc.cluster.local 9200; do echo waiting for elasticsearch; sleep 2; done;']

---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  labels:
    app: kibana
spec:
  type: ClusterIP
  ports:
  - port: 5601
    targetPort: 5601
    name: http
  selector:
    app: kibana

---
apiVersion: v1
kind: Service
metadata:
  name: kibana-lb
  labels:
    app: kibana
    type: external
spec:
  type: LoadBalancer
  ports:
  - port: 5601
    targetPort: 5601
    name: http
  selector:
    app: kibana

---
# Logstash ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  labels:
    app: logstash
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
    xpack.monitoring.enabled: false
  
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
      
      tcp {
        port => 5000
        codec => json
      }
      
      http {
        port => 8080
      }
    }

    filter {
      # Filtro para logs de microservices
      if [fields][service] {
        mutate {
          add_tag => ["microservice"]
        }
        
        # Parse log level
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level}" }
        }
        
        # Parse stack traces para errores
        if [level] == "ERROR" {
          multiline {
            pattern => "^\s"
            what => "previous"
          }
        }
      }
      
      # Filtro para logs de Kubernetes
      if [kubernetes] {
        mutate {
          add_tag => ["kubernetes"]
        }
      }
      
      # Enriquecimiento con informaciÃ³n de servicio
      if [kubernetes][pod][name] {
        if [kubernetes][pod][name] =~ /api-gateway/ {
          mutate { add_field => { "service_type" => "api-gateway" } }
        } else if [kubernetes][pod][name] =~ /user-service/ {
          mutate { add_field => { "service_type" => "user-service" } }
        } else if [kubernetes][pod][name] =~ /product-service/ {
          mutate { add_field => { "service_type" => "product-service" } }
        } else if [kubernetes][pod][name] =~ /order-service/ {
          mutate { add_field => { "service_type" => "order-service" } }
        } else if [kubernetes][pod][name] =~ /payment-service/ {
          mutate { add_field => { "service_type" => "payment-service" } }
        }
      }
    }

    output {
      elasticsearch {
        hosts => ["elasticsearch.monitoring.svc.cluster.local:9200"]
        index => "ecommerce-logs-%{+YYYY.MM.dd}"
      }
      
      # Output para debugging (opcional)
      stdout {
        codec => rubydebug
      }
    }

---
# Logstash Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  labels:
    app: logstash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:7.17.0
        ports:
        - containerPort: 5044
          name: beats
        - containerPort: 5000
          name: tcp
        - containerPort: 8080
          name: http
        env:
        - name: LS_JAVA_OPTS
          value: "-Xms512m -Xmx512m"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: logstash-config
          mountPath: /usr/share/logstash/config
        - name: logstash-pipeline
          mountPath: /usr/share/logstash/pipeline
        readinessProbe:
          httpGet:
            path: /
            port: 9600
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 9600
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: logstash-config
        configMap:
          name: logstash-config
          items:
          - key: logstash.yml
            path: logstash.yml
      - name: logstash-pipeline
        configMap:
          name: logstash-config
          items:
          - key: logstash.conf
            path: logstash.conf
      initContainers:
      - name: wait-for-elasticsearch
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z elasticsearch.monitoring.svc.cluster.local 9200; do echo waiting for elasticsearch; sleep 2; done;']

---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  labels:
    app: logstash
spec:
  type: ClusterIP
  ports:
  - port: 5044
    targetPort: 5044
    name: beats
  - port: 5000
    targetPort: 5000
    name: tcp
  - port: 8080
    targetPort: 8080
    name: http
  selector:
    app: logstash
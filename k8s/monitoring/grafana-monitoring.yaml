apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  labels:
    app: grafana
data:
  prometheus.yaml: |-
    {
        "apiVersion": 1,
        "datasources": [
            {
               "access":"proxy",
                "editable": true,
                "name": "prometheus",
                "orgId": 1,
                "type": "prometheus",
                "url": "http://prometheus.monitoring.svc.cluster.local:9090",
                "version": 1
            }
        ]
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  labels:
    app: grafana
data:
  ecommerce-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Ecommerce Microservices Overview - GCP",
        "tags": ["ecommerce", "microservices", "gcp"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Services Health Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up",
                "refId": "A",
                "legendFormat": "{{service}} - {{access_method}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "mappings": [
                  {"options": {"0": {"text": "DOWN", "color": "red"}}, "type": "value"},
                  {"options": {"1": {"text": "UP", "color": "green"}}, "type": "value"}
                ],
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "green", "value": 1}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Request Rate by Service",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_server_requests_seconds_count[5m])",
                "refId": "A",
                "legendFormat": "{{service}} requests/sec"
              }
            ],
            "yAxes": [
              {"label": "Requests/sec"},
              {"show": false}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Response Time (95th percentile)",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_server_requests_seconds_bucket[5m]))",
                "refId": "A",
                "legendFormat": "{{service}} p95"
              }
            ],
            "yAxes": [
              {"label": "Seconds"},
              {"show": false}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "JVM Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "jvm_memory_used_bytes / jvm_memory_max_bytes * 100",
                "refId": "A",
                "legendFormat": "{{service}} memory %"
              }
            ],
            "yAxes": [
              {"label": "Memory %", "min": 0, "max": 100},
              {"show": false}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "id": 5,
            "title": "Error Rate by Service",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_server_requests_seconds_count{status=~\"5..\"}[5m]) / rate(http_server_requests_seconds_count[5m])",
                "refId": "A",
                "legendFormat": "{{service}} error rate"
              }
            ],
            "yAxes": [
              {"label": "Error Rate %", "min": 0},
              {"show": false}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "id": 6,
            "title": "JVM Threads",
            "type": "graph",
            "targets": [
              {
                "expr": "jvm_threads_current",
                "refId": "A",
                "legendFormat": "{{service}} threads"
              }
            ],
            "yAxes": [
              {"label": "Thread Count"},
              {"show": false}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          },
          {
            "id": 7,
            "title": "Kubernetes Pod Status",
            "type": "stat",
            "targets": [
              {
                "expr": "kube_pod_status_ready{namespace=\"ecommerce-dev\"}",
                "refId": "A",
                "legendFormat": "{{pod}} ready"
              }
            ],
            "gridPos": {"h": 6, "w": 12, "x": 0, "y": 24}
          },
          {
            "id": 8,
            "title": "API Gateway External Access",
            "type": "stat", 
            "targets": [
              {
                "expr": "up{job=\"api-gateway-direct\"}",
                "refId": "A",
                "legendFormat": "API Gateway (34.136.149.19:8080)"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "mappings": [
                  {"options": {"0": {"text": "OFFLINE", "color": "red"}}, "type": "value"},
                  {"options": {"1": {"text": "ONLINE", "color": "green"}}, "type": "value"}
                ]
              }
            },
            "gridPos": {"h": 6, "w": 12, "x": 12, "y": 24}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "30s"
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
      - name: grafana
        image: grafana/grafana:9.5.0
        ports:
        - containerPort: 3000
          name: http-grafana
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /robots.txt
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 3000
          timeoutSeconds: 1
        resources:
          requests:
            cpu: "250m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-pv
        - mountPath: /etc/grafana/provisioning/datasources
          name: grafana-datasources
          readOnly: false
        - mountPath: /etc/grafana/provisioning/dashboards
          name: grafana-dashboards
          readOnly: false
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: admin123
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel"
        - name: GF_SERVER_DOMAIN
          value: "grafana.monitoring.svc.cluster.local"
        - name: GF_SERVER_ROOT_URL
          value: "http://grafana.monitoring.svc.cluster.local:3000"
      volumes:
      - name: grafana-pv
        emptyDir: {}
      - name: grafana-datasources
        configMap:
          defaultMode: 420
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          defaultMode: 420
          name: grafana-dashboards

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
  - port: 3000
    protocol: TCP
    targetPort: http-grafana
    name: http-grafana
  selector:
    app: grafana

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-lb
  labels:
    app: grafana
    type: external
spec:
  type: LoadBalancer
  ports:
  - port: 3000
    protocol: TCP
    targetPort: 3000
    name: http-grafana
  selector:
    app: grafana
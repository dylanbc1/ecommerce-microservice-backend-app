# Trivy Operator para escaneo continuo de vulnerabilidades
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trivy-operator
  labels:
    app: trivy-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: trivy-operator
  template:
    metadata:
      labels:
        app: trivy-operator
    spec:
      serviceAccountName: trivy-operator
      containers:
      - name: trivy-operator
        image: aquasec/trivy-operator:0.15.1
        env:
        - name: OPERATOR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: OPERATOR_TARGET_NAMESPACES
          value: "ecommerce-dev,ecommerce-stage,ecommerce-prod"
        - name: OPERATOR_LOG_DEV_MODE
          value: "false"
        - name: OPERATOR_SCAN_JOB_TIMEOUT
          value: "5m"
        - name: OPERATOR_CONCURRENT_SCAN_JOBS_LIMIT
          value: "10"
        - name: OPERATOR_SCAN_JOB_RETRY_AFTER
          value: "30s"
        - name: OPERATOR_BATCH_DELETE_LIMIT
          value: "10"
        - name: OPERATOR_BATCH_DELETE_DELAY
          value: "10s"
        - name: TRIVY_SERVER_HEALTH_CHECK_CACHE_EXPIRATION
          value: "10h"
        - name: OPERATOR_VULNERABILITY_SCANNER_ENABLED
          value: "true"
        - name: OPERATOR_CONFIG_AUDIT_SCANNER_ENABLED
          value: "true"
        - name: OPERATOR_RBAC_ASSESSMENT_SCANNER_ENABLED
          value: "true"
        - name: OPERATOR_INFRA_ASSESSMENT_SCANNER_ENABLED
          value: "true"
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20

---
# ServiceAccount para Trivy Operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trivy-operator
  labels:
    app: trivy-operator

---
# ClusterRole para Trivy Operator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: trivy-operator
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log", "replicationcontrollers", "services", "endpoints", "persistentvolumes", "persistentvolumeclaims", "configmaps", "secrets", "serviceaccounts"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["replicasets", "deployments", "daemonsets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies", "ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["aquasecurity.github.io"]
  resources: ["vulnerabilityreports", "configauditreports", "rbacassessmentreports", "infraassessmentreports"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# ClusterRoleBinding para Trivy Operator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: trivy-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: trivy-operator
subjects:
- kind: ServiceAccount
  name: trivy-operator
  namespace: monitoring

---
# Trivy Server para cache y mejores performance
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trivy-server
  labels:
    app: trivy-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: trivy-server
  template:
    metadata:
      labels:
        app: trivy-server
    spec:
      containers:
      - name: trivy-server
        image: aquasec/trivy:0.45.0
        command:
        - trivy
        - server
        - --listen
        - 0.0.0.0:8080
        - --cache-dir
        - /tmp/trivy/.cache
        - --log-level
        - info
        ports:
        - containerPort: 8080
          name: trivy-server
        env:
        - name: TRIVY_DEBUG
          value: "false"
        - name: TRIVY_CACHE_DIR
          value: /tmp/trivy/.cache
        - name: TRIVY_TOKEN_HEADER
          value: "Trivy-Token"
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"
        volumeMounts:
        - name: cache
          mountPath: /tmp/trivy/.cache
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
      volumes:
      - name: cache
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: trivy-server
  labels:
    app: trivy-server
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    name: trivy-server
  selector:
    app: trivy-server

---
# OWASP ZAP para security testing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: owasp-zap
  labels:
    app: owasp-zap
spec:
  replicas: 1
  selector:
    matchLabels:
      app: owasp-zap
  template:
    metadata:
      labels:
        app: owasp-zap
    spec:
      containers:
      - name: owasp-zap
        image: owasp/zap2docker-stable:latest
        command: ["zap.sh"]
        args: ["-daemon", "-host", "0.0.0.0", "-port", "8080", "-config", "api.addrs.addr.name=.*", "-config", "api.addrs.addr.regex=true"]
        ports:
        - containerPort: 8080
          name: zap-api
        env:
        - name: ZAP_PORT
          value: "8080"
        resources:
          requests:
            cpu: "250m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        readinessProbe:
          httpGet:
            path: /JSON/core/view/version/
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /JSON/core/view/version/
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: owasp-zap
  labels:
    app: owasp-zap
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    name: zap-api
  selector:
    app: owasp-zap

---
# Security Dashboard (simple web interface para mostrar resultados de seguridad)
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-dashboard-config
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Ecommerce Security Dashboard</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; }
            .header { background-color: #2c3e50; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
            .card { background-color: white; padding: 20px; margin: 10px 0; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
            .status-ok { color: #27ae60; }
            .status-warning { color: #f39c12; }
            .status-critical { color: #e74c3c; }
            .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üîí Ecommerce Security Dashboard</h1>
                <p>Real-time security monitoring for microservices</p>
            </div>
            
            <div class="grid">
                <div class="card">
                    <h3>üõ°Ô∏è Trivy Vulnerability Scanning</h3>
                    <p>Status: <span class="status-ok">‚úÖ Active</span></p>
                    <p>Last Scan: <span id="last-scan">Loading...</span></p>
                    <p>Critical Issues: <span id="critical-issues">0</span></p>
                </div>
                
                <div class="card">
                    <h3>üîç OWASP ZAP Security Testing</h3>
                    <p>Status: <span class="status-ok">‚úÖ Ready</span></p>
                    <p>API Endpoint: owasp-zap:8080</p>
                    <p>Last Test: <span id="last-zap-test">N/A</span></p>
                </div>
                
                <div class="card">
                    <h3>üìä Security Metrics</h3>
                    <p>Services Monitored: <span id="services-count">8</span></p>
                    <p>Containers Scanned: <span id="containers-scanned">Loading...</span></p>
                    <p>Security Policies: <span class="status-ok">‚úÖ Applied</span></p>
                </div>
                
                <div class="card">
                    <h3>üö® Recent Alerts</h3>
                    <div id="recent-alerts">
                        <p>No recent security alerts</p>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h3>üìã Security Checklist</h3>
                <ul>
                    <li>‚úÖ Container vulnerability scanning enabled</li>
                    <li>‚úÖ RBAC policies configured</li>
                    <li>‚úÖ Network policies applied</li>
                    <li>‚úÖ Secret management in place</li>
                    <li>‚úÖ Security monitoring active</li>
                    <li>‚úÖ OWASP ZAP testing configured</li>
                </ul>
            </div>
        </div>
        
        <script>
            // Simple JavaScript para actualizar datos
            function updateDashboard() {
                document.getElementById('last-scan').textContent = new Date().toLocaleString();
                document.getElementById('containers-scanned').textContent = '12';
                document.getElementById('services-count').textContent = '8';
            }
            
            // Actualizar cada 30 segundos
            setInterval(updateDashboard, 30000);
            updateDashboard();
        </script>
    </body>
    </html>

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-dashboard
  labels:
    app: security-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: security-dashboard
  template:
    metadata:
      labels:
        app: security-dashboard
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: dashboard-config
          mountPath: /usr/share/nginx/html
        resources:
          requests:
            cpu: "50m"
            memory: "64Mi"
          limits:
            cpu: "100m"
            memory: "128Mi"
      volumes:
      - name: dashboard-config
        configMap:
          name: security-dashboard-config

---
apiVersion: v1
kind: Service
metadata:
  name: security-dashboard
  labels:
    app: security-dashboard
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    name: http
  selector:
    app: security-dashboard